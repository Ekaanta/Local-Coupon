{"name": " DEBUG - Inspect Form Fields", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: Page.evaluate: SyntaxError: Unexpected identifier 'id'\n    at eval (<anonymous>)\n    at UtilityScript.evaluate (<anonymous>:313:29)\n    at UtilityScript.<anonymous> (<anonymous>:1:44)", "trace": "@allure.epic(\"Business Owner Management\")\n    @allure.feature(\"Form Inspection\")\n    @allure.story(\"Debug Information\")\n    @allure.title(\" DEBUG - Inspect Form Fields\")\n    @allure.description(\"Debug test to examine all form fields and their properties after login\")\n    def test_debug_form_fields_with_login():\n        \"\"\"\n        Debug test to inspect form fields after proper login\n        \"\"\"\n        with sync_playwright() as p:\n            browser = p.chromium.launch(headless=False)\n            page = browser.new_page()\n    \n            try:\n                # Login first\n                login_to_dashboard(page)\n    \n                with allure.step(\" Open Business Owner Form\"):\n                    page.goto(URLS[\"business_owners\"])\n                    page.wait_for_timeout(2000)\n    \n                    # Click add button\n                    add_button = page.locator(\"button:has-text('Add Business Owner'), button:has-text('Add')\")\n                    if add_button.count() > 0:\n                        add_button.first.click()\n                    else:\n                        page.locator(\"[data-testid*='add'], .add-button\").first.click()\n    \n                    page.wait_for_timeout(3000)\n    \n                with allure.step(\" Analyze Form Fields\"):\n>                   form_analysis = page.evaluate(\"\"\"\n                        () => {\n                            const inputs = document.querySelectorAll('input, select, textarea');\n                            const analysis = {\n                                total_fields: inputs.length,\n                                fields: []\n                            };\n    \n                            inputs.forEach((input, index) => {\n                                analysis.fields.push({\n                                    index: index + 1,\n                                    id: input.id || 'no-id', gf id\n                                    name: input.name || 'no-name',\n                                    type: input.type || input.tagName.toLowerCase(),\n                                    placeholder: input.placeholder || 'no-placeholder',\n                                    required: input.required,\n                                    visible: input.offsetParent !== null,\n                                    value: input.value || ''\n                                });\n                            });\n    \n                            return analysis;\n                        }\n                    \"\"\")\n\ntest_nm.py:561: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:8536: in evaluate\n    self._sync(\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_page.py:468: in evaluate\n    return await self._main_frame.evaluate(expression, arg)\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:278: in evaluate\n    await self._channel.send(\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x0000025E89A25E50>, cb = <function Channel.send.<locals>.<lambda> at 0x0000025E89A23A60>, is_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.Error: Page.evaluate: SyntaxError: Unexpected identifier 'id'\nE               at eval (<anonymous>)\nE               at UtilityScript.evaluate (<anonymous>:313:29)\nE               at UtilityScript.<anonymous> (<anonymous>:1:44)\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: Error"}, "description": "Debug test to examine all form fields and their properties after login", "steps": [{"name": " Login to Dashboard", "status": "passed", "attachments": [{"name": " Login Page", "source": "c6e9e7d1-11fa-450e-9bfb-97b1a6c00a1d-attachment.png", "type": "image/png"}, {"name": " Credentials Filled", "source": "416d81f8-272b-40d5-a1f8-5074d7b8502b-attachment.png", "type": "image/png"}, {"name": " After Login", "source": "881f9a64-0f5b-46d1-a02a-1eb552f04c4f-attachment.png", "type": "image/png"}, {"name": " Login Success", "source": "3af8d278-5bfc-4437-8de5-8f28f370dd2c-attachment.txt", "type": "text/plain"}], "start": 1749034206511, "stop": 1749034213827}, {"name": " Open Business Owner Form", "status": "passed", "start": 1749034213827, "stop": 1749034219562}, {"name": " Analyze Form Fields", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: Page.evaluate: SyntaxError: Unexpected identifier 'id'\n    at eval (<anonymous>)\n    at UtilityScript.evaluate (<anonymous>:313:29)\n    at UtilityScript.<anonymous> (<anonymous>:1:44)\n", "trace": "  File \"C:\\Users\\Ekanta Banik Durjoy\\Desh\\test_nm.py\", line 561, in test_debug_form_fields_with_login\n    form_analysis = page.evaluate(\"\"\"\n        () => {\n    ...<20 lines>...\n        }\n    \"\"\")\n  File \"C:\\Users\\Ekanta Banik Durjoy\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py\", line 8536, in evaluate\n    self._sync(\n    ~~~~~~~~~~^\n        self._impl_obj.evaluate(expression=expression, arg=mapping.to_impl(arg))\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\Ekanta Banik Durjoy\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_sync_base.py\", line 115, in _sync\n    return task.result()\n           ~~~~~~~~~~~^^\n  File \"C:\\Users\\Ekanta Banik Durjoy\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_page.py\", line 468, in evaluate\n    return await self._main_frame.evaluate(expression, arg)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Ekanta Banik Durjoy\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py\", line 278, in evaluate\n    await self._channel.send(\n    ...<5 lines>...\n    )\n  File \"C:\\Users\\Ekanta Banik Durjoy\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py\", line 61, in send\n    return await self._connection.wrap_api_call(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<2 lines>...\n    )\n    ^\n  File \"C:\\Users\\Ekanta Banik Durjoy\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py\", line 528, in wrap_api_call\n    raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\n"}, "start": 1749034219562, "stop": 1749034219567}], "attachments": [{"name": "stdout", "source": "e3c0ad59-0aae-4d6b-abb5-e2a75a92aa80-attachment.txt", "type": "text/plain"}], "start": 1749034205853, "stop": 1749034219862, "uuid": "4ca59fdc-1f1e-4fc9-ae68-271e73d1da22", "historyId": "3125e0f8b030afc7ba40104aa42c7d79", "testCaseId": "3125e0f8b030afc7ba40104aa42c7d79", "fullName": "test_nm#test_debug_form_fields_with_login", "labels": [{"name": "epic", "value": "Business Owner Management"}, {"name": "feature", "value": "Form Inspection"}, {"name": "story", "value": "Debug Information"}, {"name": "suite", "value": "test_nm"}, {"name": "host", "value": "DESKTOP-VKIO4T7"}, {"name": "thread", "value": "19752-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_nm"}]}