{"name": "Test Add Business Owner - Alternative Approach", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: Page.wait_for_selector: Unexpected token \"=\" while parsing css selector \"h5:has-text('Add Business Owner'), text=Add Business Owner\". Did you mean to CSS.escape it?\nCall log:\n  - waiting for h5:has-text('Add Business Owner'), text=Add Business Owner to be visible", "trace": "@allure.title(\"Test Add Business Owner - Alternative Approach\")\n    def test_add_business_owner_alternative():\n        with sync_playwright() as p:\n            browser = p.chromium.launch(headless=False)\n            page = browser.new_page()\n    \n            page.goto(\"https://dashboard.impactoapps.com/business-owners\")\n    \n            print(\"Clicking 'Add Business Owner' button...\")\n            page.click(\"button:has-text('Add Business Owner')\")\n            page.wait_for_load_state(\"networkidle\")  # Wait for network to be idle\n    \n            # Wait for modal to appear\n>           page.wait_for_selector(\"h5:has-text('Add Business Owner'), text=Add Business Owner\", timeout=10000)\n\ntest_nm.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:8187: in wait_for_selector\n    self._sync(\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_page.py:425: in wait_for_selector\n    return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x000001EFB0818910>, cb = <function Channel.send.<locals>.<lambda> at 0x000001EFB04D4400>, is_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.Error: Page.wait_for_selector: Unexpected token \"=\" while parsing css selector \"h5:has-text('Add Business Owner'), text=Add Business Owner\". Did you mean to CSS.escape it?\nE           Call log:\nE             - waiting for h5:has-text('Add Business Owner'), text=Add Business Owner to be visible\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: Error"}, "attachments": [{"name": "stdout", "source": "15f1f974-da4f-4d4d-8cf1-f4b70485a130-attachment.txt", "type": "text/plain"}], "start": 1749016505460, "stop": 1749016510966, "uuid": "0661deb2-8fc3-4eb5-bfef-e83987006f3c", "historyId": "2fe9de3901dca17182dd52fdc3ce5f15", "testCaseId": "2fe9de3901dca17182dd52fdc3ce5f15", "fullName": "test_nm#test_add_business_owner_alternative", "labels": [{"name": "suite", "value": "test_nm"}, {"name": "host", "value": "DESKTOP-VKIO4T7"}, {"name": "thread", "value": "14076-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_nm"}]}